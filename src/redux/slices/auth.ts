/* eslint-disable no-param-reassign */
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

import axios from '../../axios';

export const fetchAuth = createAsyncThunk(
  'auth/fetchAuth',
  async (params: any) => {
    const { data } = await axios.post('/auth/login', params);
    return data;
  }
);

export const fetchRegister = createAsyncThunk(
  'auth/fetchRegister',
  async (params: any) => {
    const { data } = await axios.post('/auth/register', params);
    return data;
  }
);

export const fetchAuthMe = createAsyncThunk('auth/fetchAuthMe', async () => {
  const { data } = await axios.get('/auth/me');
  return data;
});

export interface AuthState {
  data: any;
  status: 'loading' | 'loaded' | 'error';
}

// const initialState = {
//   data: null,
//   status: 'loading',
// };

const initialState: AuthState = {
  data: null,
  status: 'loading',
};

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: (state) => {
      state.data = null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAuth.pending, (state) => {
        state.status = 'loading';
        state.data = null;
      })
      .addCase(fetchAuth.fulfilled, (state, action) => {
        state.status = 'loaded';
        state.data = action.payload;
      })
      .addCase(fetchAuth.rejected, (state) => {
        state.status = 'error';
        state.data = null;
      })
      .addCase(fetchRegister.pending, (state) => {
        state.status = 'loading';
        state.data = null;
      })
      .addCase(fetchRegister.fulfilled, (state, action) => {
        state.status = 'loaded';
        state.data = action.payload;
      })
      .addCase(fetchRegister.rejected, (state) => {
        state.status = 'error';
        state.data = null;
      });
  },
});

// const authSlice = createSlice({
//   name: 'auth',
//   initialState,
//   reducers: {
//     logout: () => {
//       // state.data = null;
//     },
//   },
//   extraReducers: {
//     // [fetchAuth.pending]: (state) => {
//     //   state.status = 'loading';
//     //   state.data = null;
//     // },
//     // [fetchAuth.fulfilled]: (state, action) => {
//     //   state.status = 'loaded';
//     //   state.data = action.payload;
//     // },
//     // [fetchAuth.rejected]: (state) => {
//     //   state.status = 'error';
//     //   state.data = null;
//     // },
//     // [fetchAuthMe.pending]: (state) => {
//     //   state.status = 'loading';
//     //   state.data = null;
//     // },
//     // [fetchAuthMe.fulfilled]: (state, action) => {
//     //   state.status = 'loaded';
//     //   state.data = action.payload;
//     // },
//     // [fetchAuthMe.rejected]: (state) => {
//     //   state.status = 'error';
//     //   state.data = null;
//     // },
//     // [fetchRegister.pending]: (state) => {
//     //   state.status = 'loading';
//     //   state.data = null;
//     // },
//     // [fetchRegister.fulfilled]: (state, action) => {
//     //   state.status = 'loaded';
//     //   state.data = action.payload;
//     // },
//     // [fetchRegister.rejected]: (state) => {
//     //   state.status = 'error';
//     //   state.data = null;
//     // },
//   },
// });

export const selectIsAuth = (state: { auth: { data: any } }) =>
  Boolean(state.auth.data);

export const authReducer = authSlice.reducer;

export const { logout } = authSlice.actions;
